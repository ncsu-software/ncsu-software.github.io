Timestamp,EmailAddress,Title,Link,Amount,Year,Sponsor,Summary
8/6/2023 18:16:52,tjmenzie@ncsu.edu,Synthetic data generation,,"$50,000",2023,Diveplan Inc.,"Many applications suffer from data scarcity. Data synthesis methods can extend small data sets to a larger, more useful set."
10/6/2023 7:48:47,ktstolee@ncsu.edu,"Improving Software Testing Education through Lightweight Explicit Testing Strategies
and Feedback",,"$299,998",2022,National Science Foundation,"Software testing is a critical skill for computer science graduates entering technical positions. Software tests, and in particular unit tests, have several uses in education. The purpose of this proposal is to create pedagogy and tools around writing unit tests for CS3 and Software Engineering (SE) courses. Building on our preliminary work, we develop and evaluate the impact of a lightweight intervention with explicit testing strategies on the test quality of student-written tests. Then, we investigate the impact of the process of writing tests on student outcomes."
10/6/2023 7:50:52,ktstolee@ncsu.edu,Automated Discovery of Cross-Language Program Behavior Inconsistency,https://www.nsf.gov/awardsearch/showAward?AWD_ID=2006947,"$499,994",2020,National Science Foundation,"This project will develop techniques to automatically identify incapabilities and potential misconceptions between two programming languages. Two main research tasks will be investigated for this project. The first task is to develop an approach for automatically identifying clusters of similar code based on dynamic behavior, likely invariants, observed side effects, and performance. Behavioral clusters are formed from snippets in multiple languages that produce the same outputs on the same inputs. Likely invariants from observed behavior are used to describe similarities and differences. The second task is to develop a technique to identify misconceptions that emerge when a programmer assumes code should behave the same but it does not. To identify misconceptions, the technique leverages the behavior clusters and characterizations from the code similarity analysis; code that looks similar but behaves differently in overt (behavior) or insidious (performance, side effects) ways are candidates. The technique will rank misconceptions based on probability of appearing and likely impact. Finally, the technique will use invariants, behavior, side effects and performance to form automated explanations of behavioral similarities and differences. Finally, these techniques and explanations will be applied for the benefit of two groups of real programmers: transfer students who know one language and need to learn a new one, and data scientists who work with many programming languages to complete their tasks. For programmers learning a new language, in student, professional, or hobby capacities, this work aims to increase the speed and reliability with which they acquire knowledge of the programming language."
10/6/2023 7:52:12,ktstolee@ncsu.edu,On the Foundations of Semantic Code Search,https://www.nsf.gov/awardsearch/showAward?AWD_ID=1749936,"$500,000",2018,NSF CAREER,"that the behavior of the found code satisfies the needs of the programmer. Current search tools consume a textual description of the desired code as a query, which ignores the behavior of the source code. Semantic code search finds code based on behavior, and recent research has demonstrated its potential to find source code to reuse code as well as repair software faults. Challenges arise when 1) the desired code does not exist; 2) there are too many results to navigate efficiently; or 3) it is difficult to differentiate between similar code snippets. These challenges are especially pronounced for programmers in languages that are less supported, such as those used by end-user programmers.

This research uses an approach to semantic search that leverages a constraint solver as the matching engine. Code fragments are indexed using symbolic analysis to obtain a constraint representation of the code behavior. Given a query in the form of input and output behavior examples, and constraints that represent the code's behavior, the solver determines if the code satisfies the query. This research develops novel techniques to 1) find approximate solutions to semantic queries; 2) enable richer query models; 3) use the constraints to characterize the differences and similarities in behavior between code snippets; and 4) efficiently navigate the space of potential solutions. The broader impact of this research is on the millions of end-user programmers and professional programmers, allowing them to more effectively reuse code."
